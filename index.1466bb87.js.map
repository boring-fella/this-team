{"mappings":"4sBAAA,IAAAA,EAAAC,EAAA,SAMMC,EAAO,CACXC,eAAgBC,SAASC,cAAc,gB,IA4DzCC,EAAe,CAAEC,qBAzDjB,SAA8BC,GAC5B,IACE,OAAOA,EACJC,KACC,SAAAC,G,IA6CeC,EA5CbC,EAAWF,EAAXE,YACAC,EAAKH,EAALG,MACAC,EAAcJ,EAAdI,eACAC,EAAIL,EAAJK,KACAC,EAASN,EAATM,UACAC,EAAYP,EAAZO,aACAC,EAAcR,EAAdQ,eACAC,EAAYT,EAAZS,aAEA,MAAO,0EAGGC,OADQ,OAAhBR,EAtBV,qKAFsB,kCAwB2CA,EACxD,WAE+BQ,OAFtBP,EAAM,2IAIqBO,OAFLP,GAASC,GAAkBC,EAAK,uGAK/BK,QAHI,EAAApB,EAAAqB,eAC/BL,GACA,mGAKAI,QAqBOT,EAxBPM,GAAgBC,EAyBzBP,EAIEA,EAASW,MAAM,EAAG,GAHhB,IAzBK,qDAGDF,OADCG,KAAKC,MAAqB,GAAfL,GAAqB,GACjC,uE,IAORM,KAAK,G,CACR,MAAOC,GACPC,QAAQC,IAAIF,EAAMG,SAElB3B,EAAKC,eAAe2B,YAClB,oDAEmBC,YAAW,WAC9B7B,EAAKC,eAAe2B,YAAc,E,GACjC,I,yCCvDA,SAASE,IACd,IAAMC,EAAiB7B,SAAS8B,iBAAiB,sBAE5CC,GAAmB,EAAnBC,GAAmB,EAAnBC,OAAmBC,E,IAAxB,QAAKC,EAAAC,EAAuBP,EAAcQ,OAAAC,cAArCP,GAAAI,EAAAC,EAAmBG,QAAAC,MAAnBT,GAAmB,GAAnBI,EAAmBM,MACRC,UAAUC,IAAI,gB,WADzBX,GAAmB,EAAnBC,EAAmBW,C,aAAnBb,GAAmB,MAAnBK,EAAmBS,QAAnBT,EAAmBS,Q,YAAnBb,E,MAAAC,C,wDCHP,IAAAa,EAAAjD,EAAA,S,oDAKekD,ECLZ,W,sBDKkBC,I,aAEjBC,KAAKC,KAAO,C,iBAGRC,IAAA,gB,MAAN,W,kBAAAC,EAAAN,EAAA,CAAAM,EAAAC,GAAAC,MAAA,SAAAC,I,IACQC,EAIFC,EADMC,E,yEAHJF,EAAM,GAAiCxC,OARhC,wCAQW,uBAAiCA,OATjD,mCASyC,UAAkBA,OAAV2C,EAAKT,M,SAIpDU,EAAAC,QAAMC,IAAIN,G,cAAhBC,EAAoBM,EAAAC,KADtBN,EACED,EADFQ,KAAQP,QAEVnC,QAAQC,IAAIgC,G,kBACLE,G,0CAPT,E,IAUAP,IAAA,e,MAAA,WACEF,KAAKC,MAAQ,C,IAGfC,IAAA,Y,MAAA,WACEF,KAAKC,KAAO,C,OCzBb,G,0BCAHgB,EAAArE,EAAA,SAEA,SAASsE,EAAwBC,GAC/BF,EAAAL,QAAWQ,KAAK,gBAAiBD,E,CCEnC,IAAME,EAAO,CACXC,qBAAsBvE,SAASC,cAAc,oBAGzCuE,EAAmB,IAAIzB,EAE7B0B,OAAOC,iBAAiB,QAExB,SAAsBC,GACpBH,EAAiBI,gBAAgBC,MAAK,SAAAnB,IAMxC,SAA+BA,GAC7BS,EAAwBT,GACxBY,EAAKC,qBAAqBO,mBACxB,YACAC,EAAAlB,QAAU1D,qBAAqBuD,KAGjC,EAAAsB,EAAAC,c,CAZEC,CAAsBxB,E","sources":["src/js/markup/film-cards-markup.js","src/js/markup/hide-elements.js","src/js/fetch/fetch-popular-films.js","<<jsx-config-pragma.js>>","src/js/display-films.js","src/js/filmoteka-popular.js"],"sourcesContent":["import { findGenreById } from '../fetch/fetch-genres';\n\nconst BASE_IMAGES_URL = 'https://image.tmdb.org/t/p/w500';\nconst RES_PICTURE =\n  'https://pixabay.com/get/g9b007b1f29e9adc0ae515b947bf22984ff721d4bc4a6c9569ee9e3e56c787e6fe6d0ccd309ad89af33b0973e7d3810b7aeb75335e9a93324c7a7b93a69f4f327_1280.jpg';\n\nconst refs = {\n  notificationEl: document.querySelector('.text-error'),\n};\n\nfunction createFilmCardMarkup(film) {\n  try {\n    return film\n      .map(\n        ({\n          poster_path,\n          title,\n          original_title,\n          name,\n          genre_ids,\n          release_date,\n          first_air_date,\n          vote_average,\n        }) => {\n          return `<div class=\"film__card\">\n          <img class=\"film-card__image\" src=\"${\n            poster_path === null ? RES_PICTURE : BASE_IMAGES_URL + poster_path\n          }\" alt=\"${title}\" loading=\"lazy\" title=\"Click to enlarge\"/>\n          <div class=\"film-card__features-wrap\">\n            <p class=\"film-card__title\">${title || original_title || name}</p>\n            <div class=\"film-card__tech-wrap\">\n              <p class=\"film-card__features\">${findGenreById(\n                genre_ids\n              )}<span class=\"film-card__features-mark\"> |</span></p>\n              <p class=\"film-card__date\">${sliceFunction(\n                release_date || first_air_date\n              )}</p>\n              <p class=\"film-card__rating\">${\n                Math.round(vote_average * 10) / 10\n              }</p>\n            </div>\n          </div>\n        </div>\n        `;\n        }\n      )\n      .join('');\n  } catch (error) {\n    console.log(error.message);\n\n    refs.notificationEl.textContent =\n      'Sorry, something going wrong... Please try again.';\n\n    const onCatchTimer = setTimeout(() => {\n      refs.notificationEl.textContent = '';\n    }, 2000);\n  }\n}\n\nfunction sliceFunction(filmDate) {\n  if (!filmDate) {\n    return '';\n  }\n\n  return filmDate.slice(0, 4);\n}\n\nexport default { createFilmCardMarkup };\n","export function hideElement() {\n  const ratingElements = document.querySelectorAll('.film-card__rating');\n\n  for (const ratingElement of ratingElements) {\n    ratingElement.classList.add('elem-isHidden');\n  }\n}\n\n// export default { hideElement };\n\nexport function hideMark() {\n  const dateElements = document.querySelectorAll('.film-card__date');\n  const featuresElements = document.querySelectorAll('.film-card__features');\n  const featuresMarkElements = document.querySelectorAll(\n    '.film-card__features-mark'\n  );\n\n  //   console.log(dateElements);\n  //   console.log(featuresElements);\n  //   console.log(featuresMarkElements);\n\n  for (const dateElement of dateElements) {\n    console.log(dateElement.textContent.length);\n\n    if (!dateElement.textContent.length) {\n      featuresMarkElements.classList.add('elem-isHidden');\n    }\n  }\n}\n","import axios from 'axios';\n\nconst KEY = '3c2d3d1a4a9318a7ef02a0fdedccb03f';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending';\n\nexport default class PopFilmsAPI {\n  constructor() {\n    this.page = 1;\n  }\n\n  async fetchPopFilms() {\n    const url = `${BASE_URL}/movie/day?api_key=${KEY}&page=${this.page}`;\n\n    const {\n      data: { results },\n    } = await axios.get(url);\n    console.log(url);\n    return results;\n  }\n\n  icrementPage() {\n    this.page += 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n}\n",null,"import storageAPI from './local-storage-api';\n\nfunction saveCurrentFilmsToLocal(films) {\n  storageAPI.save('display-films', films);\n}\n\nfunction getFilmFromLocal(id) {\n  const localFilms = storageAPI.load('display-films');\n  const currentFilm = localFilms.find(film => film.id === id);\n  return currentFilm;\n}\n\nexport { saveCurrentFilmsToLocal, getFilmFromLocal };\n","import PopFilmsAPI from './fetch/fetch-popular-films';\nimport FilmCards from './markup/film-cards-markup';\nimport { hideElement, hideMark } from './markup/hide-elements';\nimport { saveCurrentFilmsToLocal, getFilmFromLocal } from './display-films';\n\nconst refs = {\n  filmGalleryContainer: document.querySelector('.film-container'),\n};\n\nconst popFilmsSerchAPI = new PopFilmsAPI();\n\nwindow.addEventListener('load', onWindowLoad);\n\nfunction onWindowLoad(event) {\n  popFilmsSerchAPI.fetchPopFilms().then(results => {\n    appendFilmCardsMarkup(results);\n  });\n}\n\n// markup functions\nfunction appendFilmCardsMarkup(results) {\n  saveCurrentFilmsToLocal(results);\n  refs.filmGalleryContainer.insertAdjacentHTML(\n    'beforeend',\n    FilmCards.createFilmCardMarkup(results)\n  );\n\n  hideElement();\n}\n"],"names":["$8y4hi","parcelRequire","$5b379bf7228e4cdf$var$refs","notificationEl","document","querySelector","$5b379bf7228e4cdf$export$2e2bcd8739ae039","createFilmCardMarkup","film","map","param","filmDate","poster_path","title","original_title","name","genre_ids","release_date","first_air_date","vote_average","concat","findGenreById","slice","Math","round","join","error","console","log","message","textContent","setTimeout","$0def588061ff6997$export$7669482c90f5c50f","ratingElements","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","classList","add","err","return","$bpxeT","$06d0d63b5977ab2a$export$2e2bcd8739ae039","PopFilmsAPI","this","page","key","$parcel$interopDefault","$2TvXO","mark","_callee","url","ref","results","_this","$dIxxU","default","get","_ctx","sent","data","$f3gYz","$257520e088848777$export$2dcfa1c633621df3","films","save","$cbd2aef0837a7fff$var$refs","filmGalleryContainer","$cbd2aef0837a7fff$var$popFilmsSerchAPI","window","addEventListener","event","fetchPopFilms","then","insertAdjacentHTML","$7PxVc","$1caSa","hideElement","$cbd2aef0837a7fff$var$appendFilmCardsMarkup"],"version":3,"file":"index.1466bb87.js.map"}