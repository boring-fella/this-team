{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SCAAC,EAAAD,EAAA,S,oDAKeE,ECLZ,W,sBDKkBC,I,aAEjBC,KAAKC,YAAc,E,iBAGfC,IAAA,a,MAAN,SAAiBC,G,kBAAjBC,EAAAP,EAAA,CAAAO,EAAAC,GAAAC,MAAA,SAAAC,I,IACQC,EAEEC,E,yEAFFD,EAAM,GAAuBE,OARtB,4CAQW,aAAwBA,OATxC,mCAS+B,WAAkCA,OAAzBC,EAAKV,YAAY,UAAaS,OAALP,G,SAElDS,EAAAC,QAAMC,IAAIN,G,cAA3BC,EAAMM,EAAAC,KAAJP,K,kBAEDA,G,0CALT,E,IAQIP,IAAA,Q,IAAJ,WACE,OAAOF,KAAKC,W,MAGd,SAAUgB,GACRjB,KAAKC,YAAcgB,C,OCvBpB,G,gFCAI,SAASC,EAAaC,GAC3BC,QAAQC,IAAIF,EAAMG,SAElB,IAAMC,EAAUC,SAASC,cAAc,eAEvCF,EAAQG,MAAMC,MAAQ,UACtBJ,EAAQK,YAAc,mD,+BHQlBC,EAAO,CACXC,OAAQN,SAASC,cAAc,gBAC/BM,QAASP,SAASC,cAAc,WAChCO,eAAgBR,SAASC,cAAc,eACvCQ,qBAAsBT,SAASC,cAAc,oBAGzCS,EAAgB,IAAIpC,EAUpBqC,EAAqB,IAAI/B,EAAAT,GAAJ,CAAe,aAR1B,CACdyC,WAAY,EACZC,aAAc,GACdC,aAAc,EACdnC,KAAM,EACNoC,aAAa,IAITC,EAAOL,EAAmBM,iBAyEhC,SAASC,EAAYC,GACnB,IAAMC,EAAcD,EAAMxC,KAC1B+B,EACGW,WAAWD,GACXE,MAAK,SAAArC,IACJ,EAAAsC,EAAAC,aAAY,IACZ,EAAAC,EAAAC,eACAC,EAAsB1C,EAAK2C,Q,IAG5BC,MAAMnC,E,CAIX,SAASiC,EAAsBC,GAC7BvB,EAAKI,qBAAqBqB,mBACxB,YACAC,EAAA1C,QAAU2C,qBAAqBJ,KAEjC,EAAAK,EAAAC,yBAAwBN,IACxB,EAAAO,EAAAC,c,CA3FF/B,EAAKG,eAAeN,MAAMC,MAAQ,UAClCE,EAAKG,eAAeJ,YAAc,GAElCC,EAAKC,OAAO+B,iBAAiB,UAE7B,SAAsBlB,GACpBA,EAAMmB,iBAKR,WACE,IAAKjC,EAAKE,QAAQgC,MAAMC,OAAQ,CAC9BnC,EAAKG,eAAeN,MAAMC,MAAQ,UAClCE,EAAKG,eAAeJ,YAAc,0BAEbqC,YAAW,WAC9BpC,EAAKG,eAAeJ,YAAc,E,GACjC,KAEH,M,EAGF,EAAAsC,EAAAC,gBACAjC,EAAckC,MAAQvC,EAAKE,QAAQgC,MAAMC,OAKzCK,EAAAC,WAAWC,IAAI,YAAaF,EAAAG,SAC5BrC,EAAmBoC,IAAI,YAAa7B,GAEpCR,EACGW,WAAWL,GACXM,MAAK,SAAArC,GACJ,GAAKA,EAAK2C,QAAQqB,OAAlB,CAaA5C,EAAKG,eAAeJ,YAAc,IAElC,EAAAqB,EAAAC,eACAC,EAAsB1C,EAAK2C,SAE3BjB,EAAmBuC,MAAMjE,EAAKkE,gBAC9B,EAAAhB,EAAAC,eAEAzB,EAAmByC,GAAG,YAAalC,GAEnC,IAAMmC,EAAepE,EAAKkE,eAC1B,EAAAT,EAAAC,gBACAtC,EAAKG,eAAeN,MAAMC,MAAQ,UAClCE,EAAKG,eAAeJ,YAAc,YAAyBlB,OAAbmE,EAAa,kBAEvCZ,YAAW,WAC7BpC,EAAKG,eAAeJ,YAAc,E,GACjC,I,KA9BH,EACE,EAAAsC,EAAAC,gBACAtC,EAAKG,eAAeN,MAAMC,MAAQ,UAClCE,EAAKG,eAAeJ,YAClB,2EAEmBqC,YAAW,WAC9BpC,EAAKG,eAAeJ,YAAc,E,GACjC,I,KAyBNyB,MAAMnC,E,CA7DT4D,E","sources":["src/js/filmoteka.js","src/js/fetch/fetch-films.js","<<jsx-config-pragma.js>>","src/js/error-function.js"],"sourcesContent":["import Pagination from 'tui-pagination';\n\nimport FilmsAPI from './fetch/fetch-films';\nimport FilmCards from './markup/film-cards-markup';\n\nimport { pagination } from './filmoteka-popular';\nimport { popular } from './filmoteka-popular';\nimport { scrollOnTop } from './scroll/scroll-to-top';\nimport { clearMurkup } from './markup/clear-markup';\nimport { hideElement, hideMark } from './markup/hide-elements';\nimport { onFetchError } from './error-function';\nimport { toggleLoader } from './loader';\nimport { saveCurrentFilmsToLocal } from './display-films';\n\nconst refs = {\n  formEl: document.querySelector('#search-form'),\n  inputEl: document.querySelector('#search'),\n  notificationEl: document.querySelector('.text-error'),\n  filmGalleryContainer: document.querySelector('.film-container'),\n};\n\nconst filmsSerchAPI = new FilmsAPI();\n\nconst options = {\n  totalItems: 0,\n  itemsPerPage: 20,\n  visiblePages: 5,\n  page: 1,\n  centerAlign: true,\n};\n\nconst paginationOnQuerry = new Pagination('pagination', options);\nconst page = paginationOnQuerry.getCurrentPage();\n\nrefs.notificationEl.style.color = '#ff001b';\nrefs.notificationEl.textContent = '';\n\nrefs.formEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  searchPicturers();\n}\n\n// search function\nfunction searchPicturers() {\n  if (!refs.inputEl.value.trim()) {\n    refs.notificationEl.style.color = '#ff001b';\n    refs.notificationEl.textContent = 'Please, type something.';\n\n    const noQueryTimer = setTimeout(() => {\n      refs.notificationEl.textContent = '';\n    }, 3000);\n\n    return;\n  }\n\n  toggleLoader();\n  filmsSerchAPI.query = refs.inputEl.value.trim();\n\n  // if ((filmsSerchAPI.query = filmsSerchAPI.query)) {\n  //   return;\n  // }\n  pagination.off('afterMove', popular);\n  paginationOnQuerry.off('afterMove', userByQuery);\n\n  filmsSerchAPI\n    .fetchFilms(page)\n    .then(data => {\n      if (!data.results.length) {\n        toggleLoader();\n        refs.notificationEl.style.color = '#ff001b';\n        refs.notificationEl.textContent =\n          'Sorry, there are no films matching your search query. Please, try again.';\n\n        const noMatchTimer = setTimeout(() => {\n          refs.notificationEl.textContent = '';\n        }, 3000);\n\n        return;\n      }\n\n      refs.notificationEl.textContent = '';\n\n      clearMurkup();\n      appendFilmCardsMarkup(data.results);\n\n      paginationOnQuerry.reset(data.total_results);\n      hideElement();\n\n      paginationOnQuerry.on('afterMove', userByQuery);\n\n      const totalResults = data.total_results;\n      toggleLoader();\n      refs.notificationEl.style.color = '#00ff22';\n      refs.notificationEl.textContent = `We found ${totalResults} films. Enjoy!`;\n\n      const succesTimer = setTimeout(() => {\n        refs.notificationEl.textContent = '';\n      }, 3000);\n    })\n\n    .catch(onFetchError);\n}\n\nfunction userByQuery(event) {\n  const currentPage = event.page;\n  filmsSerchAPI\n    .fetchFilms(currentPage)\n    .then(data => {\n      scrollOnTop(0);\n      clearMurkup();\n      appendFilmCardsMarkup(data.results);\n    })\n\n    .catch(onFetchError);\n}\n\n// markup functions\nfunction appendFilmCardsMarkup(results) {\n  refs.filmGalleryContainer.insertAdjacentHTML(\n    'beforeend',\n    FilmCards.createFilmCardMarkup(results)\n  );\n  saveCurrentFilmsToLocal(results);\n  hideElement();\n}\n","import axios from 'axios';\n\nconst KEY = '3c2d3d1a4a9318a7ef02a0fdedccb03f';\nconst BASE_URL = 'https://api.themoviedb.org/3/search/movie';\n\nexport default class FilmsAPI {\n  constructor() {\n    this.searchQuery = '';\n  }\n\n  async fetchFilms(page) {\n    const url = `${BASE_URL}?api_key=${KEY}&query=${this.searchQuery}&page=${page}`;\n\n    const { data } = await axios.get(url);\n\n    return data;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n}\n",null,"export function onFetchError(error) {\n  console.log(error.message);\n\n  const notifEl = document.querySelector('.text-error');\n\n  notifEl.style.color = '#ff001b';\n  notifEl.textContent = 'Sorry, something going wrong... Please try again.';\n}\n"],"names":["$1VFfL","parcelRequire","$bpxeT","$3d4fbc75103df954$export$2e2bcd8739ae039","FilmsAPI","this","searchQuery","key","page","$parcel$interopDefault","$2TvXO","mark","_callee","url","data","concat","_this","$dIxxU","default","get","_ctx","sent","newQuery","$0c742ce462b9b671$export$238059e5c5b89ea2","error","console","log","message","notifEl","document","querySelector","style","color","textContent","$0d1473df3547cfcd$var$refs","formEl","inputEl","notificationEl","filmGalleryContainer","$0d1473df3547cfcd$var$filmsSerchAPI","$0d1473df3547cfcd$var$paginationOnQuerry","totalItems","itemsPerPage","visiblePages","centerAlign","$0d1473df3547cfcd$var$page","getCurrentPage","$0d1473df3547cfcd$var$userByQuery","event","currentPage","fetchFilms","then","$a8hHM","scrollOnTop","$aEj0R","clearMurkup","$0d1473df3547cfcd$var$appendFilmCardsMarkup","results","catch","insertAdjacentHTML","$7PxVc","createFilmCardMarkup","$3dnU7","saveCurrentFilmsToLocal","$1caSa","hideElement","addEventListener","preventDefault","value","trim","setTimeout","$kvC6y","toggleLoader","query","$huWAn","pagination","off","popular","length","reset","total_results","on","totalResults","$0d1473df3547cfcd$var$searchPicturers"],"version":3,"file":"index.85ff160a.js.map"}